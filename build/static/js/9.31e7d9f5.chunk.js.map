{"version":3,"sources":["components/web3/ConnectWalletModal.tsx","../node_modules/react-use/esm/usePrevious.js"],"names":["ConnectWalletModal","props","modalProps","isOpen","onRequestClose","restModalProps","maybeContractWallet","isActiveMember","useSelector","connectedMember","connectedMemberAddress","memberAddress","useWeb3Modal","account","accountENS","connected","connectWeb3Modal","disconnectWeb3Modal","networkId","providerOptions","web3Modal","useIsDefaultChain","defaultChainError","isDefaultChain","pathname","useLocation","previousPathname","state","ref","useRef","useEffect","current","usePrevious","isWrongNetwork","isChainGanache","CHAINS","GANACHE","memberProfilePath","displayOptions","Object","entries","filter","type","isMobile","map","provider","isButtonDisabled","display","name","className","cachedProvider","onClick","disabled","providerName","handleSetDelegateClicked","setTimeout","Modal","keyProp","isOpenHandler","TimesSVG","maybeMemberText","to","getContractWalletWarningText","message","LoaderLarge","CopyWithTooltip","render","elementRef","isCopied","setCopied","tooltipID","textToCopy","window","location","href"],"mappings":"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","file":"static/js/9.31e7d9f5.chunk.js","sourcesContent":["import {isMobile} from '@walletconnect/browser-utils';\nimport {Link, useLocation} from 'react-router-dom';\nimport {useEffect} from 'react';\nimport {usePrevious} from 'react-use';\nimport {useSelector} from 'react-redux';\n\nimport {CHAINS} from '../../config';\nimport {CopyWithTooltip} from '../common/CopyWithTooltip';\nimport {CycleEllipsis} from '../feedback';\nimport {StoreState} from '../../store/types';\nimport {useIsDefaultChain} from './hooks';\nimport {useWeb3Modal} from './hooks';\nimport {WalletIcon} from '.';\nimport LoaderLarge from '../feedback/LoaderLarge';\nimport Modal from '../common/Modal';\nimport TimesSVG from '../../assets/svg/TimesSVG';\n\ntype ConnectWalletModalProps = {\n  modalProps: {\n    isOpen: Parameters<typeof Modal>[0]['isOpen'];\n    onRequestClose: () => void;\n  } & Partial<Parameters<typeof Modal>[0]>;\n  // @todo Look into more generic way to render errors in the modal\n  maybeContractWallet?: boolean;\n};\n\nexport default function ConnectWalletModal(\n  props: ConnectWalletModalProps\n): JSX.Element {\n  const {\n    modalProps: {isOpen, onRequestClose, ...restModalProps},\n    maybeContractWallet = false,\n  } = props;\n\n  /**\n   * Selectors\n   */\n\n  const isActiveMember: boolean = useSelector(\n    ({connectedMember}: StoreState) => connectedMember?.isActiveMember === true\n  );\n\n  const connectedMemberAddress = useSelector(\n    ({connectedMember}: StoreState) => connectedMember?.memberAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    // @todo Use and handle error in the UI\n    // error,\n    account,\n    accountENS,\n    connected,\n    connectWeb3Modal,\n    disconnectWeb3Modal,\n    networkId,\n    providerOptions,\n    web3Modal,\n  } = useWeb3Modal();\n\n  const {defaultChainError, isDefaultChain} = useIsDefaultChain();\n\n  /**\n   * Their hooks\n   */\n\n  const {pathname} = useLocation();\n  const previousPathname = usePrevious<string>(pathname);\n\n  /**\n   * Variables\n   */\n\n  const isWrongNetwork: boolean = isDefaultChain === false;\n  const isChainGanache = networkId === CHAINS.GANACHE;\n  const memberProfilePath: string = `/members/${connectedMemberAddress}`;\n\n  const displayOptions: JSX.Element[] = Object.entries(providerOptions)\n    // If mobile, filter-out `\"injected\"`\n    .filter(([type]) => (isMobile() ? type !== 'injected' : true))\n    .map((provider: Record<number, any>) => {\n      const isButtonDisabled: boolean =\n        isChainGanache && provider[0] === 'walletconnect';\n\n      return (\n        <button\n          aria-label={`Connect to ${provider[1].display.name}`}\n          key={provider[0]}\n          className={`walletconnect__options-button\n            ${\n              connected && web3Modal?.cachedProvider === provider[0]\n                ? 'walletconnect__options-button--connected'\n                : ''\n            }`}\n          onClick={() =>\n            isButtonDisabled ? () => {} : connectWeb3Modal(provider[0])\n          }\n          // disable WalletConnect button on Ganache network\n          disabled={isButtonDisabled}>\n          <span className=\"wallet-name\">{provider[1].display.name}</span>\n\n          <WalletIcon providerName={provider[0]} />\n        </button>\n      );\n    });\n\n  /**\n   * Effects\n   */\n\n  /**\n   * Automatically trigger the modal to close if we navigated from the\n   * \"set a delegate\" link in this component to the `memberProfilePath`.\n   */\n  useEffect(() => {\n    if (\n      isOpen &&\n      pathname === memberProfilePath &&\n      previousPathname &&\n      previousPathname !== memberProfilePath\n    ) {\n      // Run last in the queue, as it completes quicker than the global \"open modal\" action.\n      setTimeout(onRequestClose, 0);\n    }\n  }, [isOpen, memberProfilePath, onRequestClose, pathname, previousPathname]);\n\n  /**\n   * Functions\n   */\n\n  function getContractWalletWarningText(): JSX.Element | null {\n    if (!connected || !maybeContractWallet || isWrongNetwork) {\n      return null;\n    }\n\n    const maybeMemberText: JSX.Element | null = isActiveMember ? (\n      <>\n        As a member, you can{' '}\n        <Link onClick={handleSetDelegateClicked} to={memberProfilePath}>\n          set a delegate\n        </Link>{' '}\n        to a key-based wallet, like MetaMask.\n      </>\n    ) : null;\n\n    return (\n      <p>\n        <small>\n          Smart contract wallets are not generally supported for features like\n          off-chain voting. {maybeMemberText}\n        </small>\n      </p>\n    );\n  }\n\n  function samurai(){\n    disconnectWeb3Modal();\n    window.location.href='/';\n    \n  }\n  /**\n   * Allow the modal to close if the previous path was already equal to\n   * `memberProfilePath` (e.g. navigated to it normally, loaded cold from brower)\n   */\n  function handleSetDelegateClicked() {\n    if (isOpen && previousPathname && previousPathname === memberProfilePath) {\n      onRequestClose();\n    }\n  }\n\n  return (\n    <Modal\n      keyProp=\"connectWalletModal\"\n      isOpen={isOpen}\n      isOpenHandler={onRequestClose}\n      {...restModalProps}>\n      {/* MODEL CLOSE BUTTON */}\n      <span\n        className=\"modal__close-button\"\n        onClick={() => {\n          onRequestClose();\n        }}>\n        <TimesSVG />\n      </span>\n\n      <div>\n        {/* TITLE */}\n        <div className=\"modal__title\">Connect Wallet</div>\n\n        {/* SUBTITLE */}\n        {(!connected || !isWrongNetwork) && (\n          <div className=\"modal__subtitle\">Choose your wallet</div>\n        )}\n\n        {/* POSSIBLE CONTRACT WALLET WARNING TEXT */}\n        {getContractWalletWarningText()}\n\n        {/* SHOW; WRONG NETWORK MSG || PROVIDER OPTIONS */}\n        {connected && isWrongNetwork && (\n          <>\n            <div className=\"error-message\">\n              <small>{defaultChainError?.message || ''}</small>\n            </div>\n\n            <div className=\"loader--large-container\">\n              <LoaderLarge />\n            </div>\n\n            <div>\n              <small>Waiting for the right network</small>\n              <CycleEllipsis />\n              <br />\n              <small>Switch networks from your wallet.</small>\n            </div>\n          </>\n        )}\n\n        {/* CONNECTED ACCOUNT TEXT */}\n        {account && (\n          <div className=\"walletconnect__connected-address\">\n            <CopyWithTooltip\n              render={({elementRef, isCopied, setCopied, tooltipID}) => (\n                <span\n                  className=\"walletconnect__connected-address-text\"\n                  data-for={tooltipID}\n                  data-tip={\n                    isCopied\n                      ? 'copied!'\n                      : accountENS\n                      ? `${accountENS} (${account})`\n                      : 'copy'\n                  }\n                  onClick={setCopied}\n                  ref={elementRef}>\n                  {accountENS || account}\n                </span>\n              )}\n              textToCopy={account}\n            />\n          </div>\n        )}\n\n        {(!connected || !isWrongNetwork) && (\n          <div className=\"walletconnect__options\">{displayOptions}</div>\n        )}\n\n        {/* DISCONNECT BUTTON LINK */}\n        {connected && (\n          <button\n            className=\"walletconnect__disconnect-link-button\"\n            onClick={samurai}>\n            {'Disconnect Wallet'}\n          </button>\n        )}\n      </div>\n    </Modal>\n  );\n}\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n"],"sourceRoot":""}