{"version":3,"sources":["components/proposals/ProcessAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","props","propsDisabled","disabled","snapshotProposal","proposal","useState","submitError","setSubmitError","contracts","useSelector","s","daoRegistryContract","DaoRegistryContract","useWeb3Modal","account","web3Instance","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","gasPrice","useETHGasPrice","average","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","dispatch","useDispatch","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","areSomeDisabled","a","Error","contract","getContractByAddress","actionId","processArguments","contractAddress","idInDAO","txArguments","from","instance","methods","getConnectedMember","e","className","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","Completed","ProposalFlowStatus","OffchainVotingGracePeriod","OffchainVotingSubmitResult","OffchainVoting","Process","Submit","AsyncStatus","configurationKeysToGet","ContractDAOConfigKeys","offchainVotingVotingPeriod","offchainVotingGracePeriod","ProposalWithOffchainVoteActions","adapterName","renderActionProp","renderAction","useDaoConfigurations","daoConfigurations","offchainVotingPeriod","offchainGracePeriod","useProposalWithOffchainVoteStatus","useMemo","daoProposalVoteResult","daoProposalVote","proposalFlowStatusError","status","stopPollingForStatus","useOffchainVotingResults","offchainVotingResults","offchainVotingResultsStatus","gracePeriodStartMs","Number","gracePeriodStartingTime","gracePeriodEndMs","votePeriodStartMs","startingTime","votePeriodEndMs","offchainVotingResult","yesUnits","Yes","units","noUnits","No","renderedActionFromProp","VotingAdapterName","OffchainVotingContract","useEffect","countdownGracePeriodEndMs","countdownGracePeriodStartMs","countdownVotingEndMs","countdownVotingStartMs","renderStatus","hasGracePeriodEnded","style","textTransform","votingResult","SubmitAction"],"mappings":"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","file":"static/js/8.13520922.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getConnectedMember} from '../../store/actions';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {ReduxDispatch, StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n  const {average: gasPrice} = useETHGasPrice();\n\n  const {isDisabled, openWhyDisabledModal, WhyDisabledModal} =\n    useMemberActionDisabled(useMemberActionDisabledProps);\n\n  /**\n   * Their hooks\n   */\n\n  const dispatch = useDispatch<ReduxDispatch>();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryContract) {\n        throw new Error('No DAO Registry contract was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!account) {\n        throw new Error('No account found.');\n      }\n\n      if (!web3Instance) {\n        throw new Error('No Web3 instance was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryContract.contractAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        ...(gasPrice ? {gasPrice} : null),\n      };\n\n      const tx = await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n\n      if (tx) {\n        // re-fetch member\n        await dispatch(\n          getConnectedMember({\n            account,\n            daoRegistryContract,\n            web3Instance,\n          })\n        );\n      }\n    } catch (error) {\n      const e = error as Error;\n\n      setSubmitError(e);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal processed!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import {useEffect, useMemo} from 'react';\n\nimport {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n  OffchainVotingStatusRenderStatusProps,\n} from './voting';\nimport {\n  ProposalData,\n  ProposalFlowStatus,\n  RenderActionPropArguments,\n} from './types';\nimport {\n  useOffchainVotingResults,\n  useProposalWithOffchainVoteStatus,\n} from './hooks';\nimport {AsyncStatus} from '../../util/types';\nimport {ContractAdapterNames, ContractDAOConfigKeys} from '../web3/types';\nimport {CycleEllipsis} from '../feedback';\nimport {useDaoConfigurations} from '../../hooks';\nimport {VotingAdapterName} from '../adapters-extensions/enums';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport ProcessAction from './ProcessAction';\nimport SubmitAction from './SubmitAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n  /**\n   * A render prop which can render any action desired.\n   * It is passed inner state and data from\n   * the child action wrapper component.\n   *\n   * - If it renders `null`, it will fall back to the component's actions.\n   * - If it renders `<></>` (`React.Fragment`) then nothing is shown in the UI.\n   */\n  renderAction?: (data: RenderActionPropArguments) => React.ReactNode;\n};\n\nconst {\n  Completed,\n  OffchainVotingGracePeriod,\n  OffchainVotingSubmitResult,\n  OffchainVoting,\n  Process,\n  Submit,\n} = ProposalFlowStatus;\n\nconst {FULFILLED} = AsyncStatus;\n\nconst configurationKeysToGet: ContractDAOConfigKeys[] = [\n  ContractDAOConfigKeys.offchainVotingVotingPeriod,\n  ContractDAOConfigKeys.offchainVotingGracePeriod,\n];\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal, renderAction: renderActionProp} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoConfigurations: [offchainVotingPeriod, offchainGracePeriod],\n  } = useDaoConfigurations(configurationKeysToGet);\n\n  const {\n    daoProposalVoteResult,\n    daoProposalVote,\n    proposalFlowStatusError,\n    status,\n    stopPollingForStatus,\n  } = useProposalWithOffchainVoteStatus(\n    useMemo(\n      () => ({\n        proposal,\n      }),\n      [proposal]\n    )\n  );\n\n  const {offchainVotingResults, offchainVotingResultsStatus} =\n    useOffchainVotingResults(proposal.snapshotProposal);\n\n  /**\n   * Variables\n   */\n\n  const gracePeriodStartMs: number =\n    Number(daoProposalVote?.gracePeriodStartingTime || 0) * 1000;\n\n  const gracePeriodEndMs: number | undefined =\n    gracePeriodStartMs + Number(offchainGracePeriod || 0) * 1000;\n\n  const votePeriodStartMs: number =\n    Number(daoProposalVote?.startingTime || 0) * 1000;\n\n  const votePeriodEndMs: number =\n    votePeriodStartMs + Number(offchainVotingPeriod || 0) * 1000;\n\n  // There is only one vote result entry as we only passed a single proposal\n  const offchainVotingResult = offchainVotingResults[0]?.[1];\n  const yesUnits = offchainVotingResult?.Yes.units || 0;\n  const noUnits = offchainVotingResult?.No.units || 0;\n\n  /**\n   * If a render prop was provided it will render it and pass\n   * internal state and data up to the parent component.\n   */\n  const renderedActionFromProp =\n    renderActionProp &&\n    renderActionProp({\n      [VotingAdapterName.OffchainVotingContract]: {\n        adapterName,\n        daoProposalVote,\n        daoProposalVoteResult,\n        gracePeriodEndMs,\n        gracePeriodStartMs,\n        proposal,\n        status,\n      },\n    });\n\n  /**\n   * Stop polling for the status, if the off-chain vote has failed\n   * and the result is not yet submitted.\n   */\n  useEffect(() => {\n    if (\n      status === OffchainVotingSubmitResult &&\n      offchainVotingResultsStatus === FULFILLED &&\n      yesUnits <= noUnits\n    ) {\n      stopPollingForStatus();\n    }\n  }, [\n    noUnits,\n    offchainVotingResultsStatus,\n    status,\n    stopPollingForStatus,\n    yesUnits,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  function renderActions(): React.ReactNode {\n    // If render prop did not return `null` then render its content\n    if (renderedActionFromProp) {\n      return renderedActionFromProp;\n    }\n\n    // Submit/Sponsor button (for proposals that have not been submitted onchain yet)\n    if (status === Submit) {\n      return <SubmitAction proposal={proposal} />;\n    }\n\n    // Off-chain voting buttons\n    if (status === OffchainVoting) {\n      return (\n        <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n      );\n    }\n\n    // Off-chain voting submit vote result\n    if (status === OffchainVotingSubmitResult) {\n      // Wait for the the off-chain voting tallies to be fetched\n      if (offchainVotingResultsStatus !== FULFILLED) {\n        return null;\n      }\n\n      // Return a React.Fragment to hide the \"Submit Vote Result\" button if vote\n      // did not pass. For now, we can assume across all adapters that if the\n      // vote did not pass then the vote result does not need to be submitted.\n      if (yesUnits <= noUnits) {\n        return null;\n      }\n\n      return (\n        <OffchainOpRollupVotingSubmitResultAction\n          adapterName={adapterName}\n          proposal={proposal}\n        />\n      );\n    }\n\n    // Process button\n    if (status === Process || status === OffchainVotingGracePeriod) {\n      return (\n        <ProcessAction\n          // Show during DAO proposal grace period, but set to disabled\n          disabled={status === OffchainVotingGracePeriod}\n          proposal={proposal}\n        />\n      );\n    }\n  }\n\n  function renderOffchainVotingStatus({\n    hasGracePeriodEnded,\n  }: OffchainVotingStatusRenderStatusProps) {\n    /**\n     * Grace period ended label\n     *\n     * There is a slight lag between the JS countdown time and when the\n     * contract's `block.timestamp` is updated. Therefore, the updated\n     * vote result is not instantaneous.\n     */\n    if (hasGracePeriodEnded && status === OffchainVotingGracePeriod) {\n      return (\n        <span>\n          Grace period ended <br />{' '}\n          <span style={{textTransform: 'lowercase'}}>\n            Awaiting contract status\n            <CycleEllipsis />\n          </span>\n        </span>\n      );\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      {/* STATUS */}\n      {(status === OffchainVoting ||\n        status === OffchainVotingSubmitResult ||\n        status === OffchainVotingGracePeriod ||\n        status === Process ||\n        status === Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodEndMs={gracePeriodEndMs}\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          countdownVotingEndMs={votePeriodEndMs}\n          countdownVotingStartMs={votePeriodStartMs}\n          renderStatus={renderOffchainVotingStatus}\n          votingResult={offchainVotingResult}\n        />\n      )}\n\n      {/* ACTIONS */}\n      <div className=\"proposaldetails__button-container\">{renderActions()}</div>\n\n      {/* ERROR */}\n      <ErrorMessageWithDetails\n        error={proposalFlowStatusError}\n        renderText=\"Something went wrong while getting the proposal's status\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}